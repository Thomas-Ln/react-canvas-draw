{"version":3,"sources":["contexts/CanvasContext.js","contexts/ColorContext.js","helpers/playAudio.js","components/ColorPicker.js","contexts/SizeContext.js","components/SizeRange.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["CanvasContext","React","createContext","canvas","setCanvas","ColorContext","color","setColor","playAudio","url","audio","Audio","volume","play","ColorPicker","useContext","useState","button","setButton","popper","setPopper","arrowElement","setArrowElement","usePopper","placement","modifiers","name","options","element","offset","styles","attributes","arrowColor","arrowStyle","Object","assign","arrow","ref","data-active","style","onClick","getAttribute","setAttribute","className","data-toggle","onChange","pickerColor","hex","SizeContext","size","setSize","SizeRange","htmlFor","min","max","value","changeEvent","target","Nav","undo","clear","localStorage","setItem","getSaveData","loadSaveData","getItem","href","App","window","innerWidth","width","innerHeight","height","Provider","canvasWidth","canvasHeight","brushRadius","brushColor","lazyRadius","gridColor","hideGrid","hideInterface","immediateLoading","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88f98552.chunk.js","sourcesContent":["import React from 'react';\n\nconst CanvasContext = React.createContext({\n  canvas: {},\n  setCanvas: () => {}\n});\n\nexport default CanvasContext;\n","import React from 'react';\n\nconst ColorContext = React.createContext({\n  color: \"\",\n  setColor: () => {}\n});\n\nexport default ColorContext;\n","export default function playAudio(url) {\n  const audio = new Audio(url);\n  audio.volume = 1;\n  audio.play();\n}\n","import React, { useContext, useState } from 'react';\nimport ColorContext                    from '../contexts/ColorContext';\nimport playAudio                       from '../helpers/playAudio';\nimport { CompactPicker }               from 'react-color'\nimport { usePopper }                   from 'react-popper';\n\nconst ColorPicker = () => {\n  const {color, setColor} = useContext(ColorContext);\n\n  const [button, setButton] = useState(null);\n  const [popper, setPopper] = useState(null);\n  const [arrowElement, setArrowElement] = useState(null);\n  const { styles, attributes } = usePopper(button, popper, {\n    placement: \"top\",\n    modifiers: [\n      {\n        name: \"arrow\",\n        options: { element: arrowElement }\n      },{\n        name: 'offset',\n        options: { offset: [0, 22] }\n      }\n    ]\n  });\n\n  // set arrow to context color\n  const arrowColor = { \"borderTopColor\" : color };\n  const arrowStyle = Object.assign(arrowColor, styles.arrow);\n\n  const handleColorChange = (pickerColor) => {\n    setColor(pickerColor.hex);\n  }\n\n  const handleToggle = () => {\n    if (popper.getAttribute(\"data-toggle\") === \"hide\") {\n      playAudio('picker.wav');\n      popper.setAttribute(\"data-toggle\", \"show\");\n      button.setAttribute(\"data-active\", \"true\");\n    } else {\n      popper.setAttribute(\"data-toggle\", \"hide\");\n      button.setAttribute(\"data-active\", \"false\");\n    }\n  }\n\n  return (\n    <div>\n      <button\n        ref={setButton}\n        data-active=\"false\"\n        style={{\"backgroundColor\": color}}\n        onClick={handleToggle}>\n        color\n      </button>\n\n      <div\n        className=\"tooltip-wrapper\"\n        data-toggle=\"hide\"\n        ref={setPopper}\n        style={styles.popper} {...attributes.popper}>\n        <div\n          className=\"picker-wrapper\">\n          <CompactPicker\n            onChange={handleColorChange}\n            color={color}/>\n        </div>\n        <div\n          className='arrow'\n          ref={setArrowElement}\n          style={arrowStyle}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default ColorPicker;\n","import React from 'react';\n\nconst SizeContext = React.createContext({\n  size: \"\",\n  setSize: () => {}\n});\n\nexport default SizeContext;\n","import React, { useContext } from 'react';\nimport SizeContext           from '../contexts/SizeContext';\nimport RangeSlider           from 'react-bootstrap-range-slider';\n\nconst SizeRange = () => {\n  const {size, setSize} = useContext(SizeContext);\n\n  return (\n    <div className=\"wrapper\">\n      <label htmlFor=\"size\">SIZE</label>\n      <RangeSlider\n        min={1}\n        max={50}\n        value={size}\n        onChange={changeEvent => setSize(changeEvent.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default SizeRange;\n","import React, { useContext } from 'react';\nimport CanvasContext         from '../contexts/CanvasContext';\nimport ColorContext          from '../contexts/ColorContext';\nimport playAudio             from '../helpers/playAudio';\nimport ColorPicker           from './ColorPicker';\nimport SizeRange             from './SizeRange';\n\nconst Nav = () => {\n  const {canvas, setCanvas} = useContext(CanvasContext);\n  const {color, setColor}   = useContext(ColorContext);\n\n  return (\n    <nav>\n    {/*SIZE*/}\n      <SizeRange />\n\n    {/*COLOR*/}\n      <ColorPicker />\n\n    {/*UNDO*/}\n      <button onClick={() => {\n        canvas.undo();\n        playAudio('undo.mp3')\n      }}>undo</button>\n\n    {/*CLEAR*/}\n      <button onClick={() => {\n        canvas.clear()\n        playAudio('clear.mp3')\n      }}>clear</button>\n\n    {/*SAVE*/}\n      <button\n        onClick={() => {\n          localStorage.setItem(\n            \"savedDrawing\",\n            canvas.getSaveData()\n          );\n          playAudio('save.wav')\n        }}\n      >save</button>\n\n    {/*LOAD*/}\n      <button\n        onClick={() => {\n          canvas.loadSaveData(\n            localStorage.getItem(\"savedDrawing\")\n          );\n          playAudio('load.wav')\n        }}\n      >load</button>\n\n    {/*CREDITS*/}\n      <span className=\"credits\">built with <a href=\"https://github.com/embiem/react-canvas-draw\">react-canvas-draw</a></span>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState } from 'react';\n// components\nimport CanvasDraw   from \"react-canvas-draw\";\nimport Nav          from \"./components/Nav\";\n// contexts\nimport ColorContext  from \"./contexts/ColorContext\";\nimport SizeContext   from \"./contexts/SizeContext\";\nimport CanvasContext from \"./contexts/CanvasContext\";\n// styles\nimport './App.css';\n\n\nconst App = () => {\n  const [canvas, setCanvas] = useState();\n  const [color, setColor]   = useState(\"dodgerblue\");\n  const [size, setSize]     = useState(5);\n  const [width, setWidth]   = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n\n  return (\n    <>\n    <ColorContext.Provider value={{color, setColor}}>\n    <SizeContext.Provider value={{size, setSize}}>\n      <CanvasDraw\n        ref={setCanvas}\n        canvasWidth={width}\n        canvasHeight={height}\n        brushRadius={size}\n        brushColor={color}\n        lazyRadius={0}\n        gridColor=\"rgba(150,150,150,0.17)\"\n        hideGrid={false}\n        hideInterface={false}\n        immediateLoading={false}\n      />\n    <CanvasContext.Provider value={{canvas, setCanvas}}>\n      <Nav/>\n    </CanvasContext.Provider>\n    </SizeContext.Provider>\n    </ColorContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}